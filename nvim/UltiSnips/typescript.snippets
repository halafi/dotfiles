global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
# def lowerdash(t):
# 	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet row "flex row" b
const Row = styled.div\`
	display: flex;
\`;
endsnippet

snippet col "flex column" b
const Column = styled.div\`
	display: flex;
	flex-direction: column;
\`;
endsnippet

snippet jcc "justify center" b
justify-content: center;
endsnippet

snippet aic "justify center" b
align-items: center;
endsnippet

snippet sc "styled component" b
const $1 = styled.$2\`
	$0
\`;
endsnippet

snippet scc "styled component from existing component" b
const $1 = styled($2)\`
	$0
\`;
endsnippet

snippet sctp "styled component theme prop" b
${({ theme }) => theme.$1};
endsnippet

snippet ednl "eslint disable next line" b
// eslint-disable-next-line $1
endsnippet

# general JS
snippet tsi "tsignore" b
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
endsnippet

snippet exp "export default" b
export default $1;
endsnippet

snippet cl "console.log" w
console.log($1);
endsnippet

snippet clv "console.log variable" w
console.log('$1:', $1);
endsnippet

snippet ce "console.error" w
console.error($1);
endsnippet

snippet cev "console.error variable" w
console.error("$1: ", $1);
endsnippet

snippet cw "console.warn" w
console.warn($1);
endsnippet

snippet cwv "console.warn variable" w
console.warn("$1: ", $1);
endsnippet

snippet ct "console.table" w
console.table($1);
endsnippet

snippet cd "console.debug" w
console.debug($1);
endsnippet

snippet cdv "console.debug variable" w
console.debug("$1: ", $1);
endsnippet

snippet dev "process.env.NODE_ENV !== 'production'" w
process.env.NODE_ENV !== "production"
endsnippet

snippet prod "process.env.NODE_ENV === 'production'" w
process.env.NODE_ENV === "production"
endsnippet

# ==========================================
# Test Snippets
#
snippet rtf "React Test File" b
import { screen } from '@testing-library/dom';

import { ${1:`!v expand('%:t:r')`} } from "../$1"

describe("$1", () => {
	it("should $2", () => {
		$3
	})
})
endsnippet

snippet desc "describe a test" b
describe("$1", () => {
	it("should $2", () => {
		$3
	})
})
endsnippet

snippet it "create a test block" b
it("should $1", () => {
	$2
})
endsnippet

snippet ait "create an async test block" b
it('should $1', async () => {
	$2
})
endsnippet

snippet todo "it.todo()" b
it.todo("should $1")
endsnippet

# react
snippet fce "function component export (with prop types)" b
import type { ReactElement } from "react"

type Props = {
	$3
}

const ${1:`!v expand('%:t:r')`}(${2:props}: $1Props) = () => {
	return ${4:null}$0
}

export default $1;
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet me "MouseEvent<HTMLButtonElement>" w
${1:event: }MouseEvent<HTML${2:Button}Element>$0
endsnippet

snippet te "TouchEvent<HTMLButtonElement>" w
${1:event: }TouchEvent<HTML${2:Button}Element>$0
endsnippet

snippet ke "KeyboardEvent<HTMLElement>" w
${1:event: }KeyboardEvent<HTML$2Element>$0
endsnippet

snippet che "ChangeEvent<HTMLInputElement>" w
${1:event: }ChangeEvent<HTML${2:Input}Element>$0
endsnippet

snippet fe "FocusEvent<HTMLInputElement>" w
${1:event: }FocusEvent<HTML${2:Input}Element>$0
endsnippet

snippet foe "FormEvent<HTMLInputElement>" w
${1:event: }FormEvent<HTML${2:Input}Element>$0
endsnippet

snippet meh "MouseEventHandler<HTMLButtonElement>" w
MouseEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet teh "TouchEventHandler<HTMLButtonElement>" w
TouchEventHandler<HTML${1:Button}Element>$0
endsnippet

snippet keh "KeyboardEventHandler<HTMLElement>" w
KeyboardEventHandler<HTML$1Element>$0
endsnippet

snippet cheh "ChangeEventHandler<HTMLInputElement>" w
ChangeEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet feh "FocusEventHandler<HTMLInputElement>" w
FocusEventHandler<HTML${1:Input}Element>$0
endsnippet

snippet foeh "FormEventHandler<HTMLElement>" w
FormEventHandler<HTMLElement>$0
endsnippet

# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set$4`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${4:doWork}(): Promise<${5:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [$3])
endsnippet

snippet useC "useContext()" b
${5:const ${1:context} =} useContext$3($2)$0
endsnippet

snippet useRed "useReducer(reducer, initialValue)" b
const [${4:state}, ${5:dispatch}] = useReducer<typeof $2>(${2:reducer}, ${3:null})
endsnippet

snippet useRedUT "use reducer untyped" b
const [${3:state}, ${4:dispatch}] = useReducer($1, ${2:{}})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null})$0
endsnippet

snippet useI "useImperitiveHandle(ref, createHandle, [inputs])" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [$1])
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null})
endsnippet

# ==========================================
# "Inline" versions of hooks
#

priority -1
snippet useC "useContext()" w
useContext$2($1)
endsnippet

snippet useCB "useCallback(fn, inputs)" w
useCallback(($1) => ${2:{
	$3
}}, [$4])
endsnippet

snippet useM "useMemo(fn, inputs)" w
useMemo(() => ${1:{
	$2
}}, [$3])
endsnippet

snippet useR "useRef(defaultValue)" w
useRef$2(${1:null})$0
endsnippet

priority 0
