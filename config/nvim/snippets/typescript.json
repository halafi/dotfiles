{
  "Ednl": {
    "prefix": ["ednl"],
    "body": ["// eslint-disable-next-line $1"]
  },
  "Tsignore": {
    "prefix": ["tsi"],
    "body": [
      "// eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "// @ts-ignore"
    ]
  },
  "exportDefault": {
    "prefix": ["exp"],
    "body": ["export default $1;"]
  },
  "consoleLog": {
    "prefix": ["cl"],
    "body": ["console.log($1);"]
  },
  "consoleLogParam": {
    "prefix": ["clv"],
    "body": ["console.log('$1:', $1);"]
  },
  "importReact": {
    "prefix": ["imr"],
    "body": ["import React from 'react';"]
  },
  "typescriptReactFunctionalExportComponent": {
    "key": "typescriptReactFunctionalExportComponent",
    "prefix": "tsrfce",
    "body": [
      "import React from 'react';",
      "",
      "type Props = {};",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ({}: Props) => {",
      "  return <div>$0</div>;",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "useState": {
    "key": "useState",
    "prefix": "useStateSnippet",
    "body": "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second});"
  },
  "useEffect": {
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first};",
      "",
      "  return () => {",
      "    ${2:second};",
      "  };",
      "}, [${3:third}]);",
      ""
    ]
  },
  "useContext": {
    "prefix": "useContextSnippet",
    "body": "const ${1:first} = useContext(${2:second});"
  },
  "describeBlock": {
    "prefix": "desc",
    "body": ["describe('${1:first}', () => {", "  $0;", "});", ""],
    "description": "Testing `describe` block"
  },
  "flexRow": {
    "prefix": "row",
    "body": [
      "const Row = styled.div`",
      "\tdisplay: flex;",
      "`;"
    ]
  },
  "flexCol": {
    "prefix": "col",
    "body": [
      "const Column = styled.div`",
      "\tdisplay: flex;",
      "\tflex-direction: column;",
      "`;"
    ]
  },
  "styledComponent": {
    "prefix": "sc",
    "body": [
      "const $1 = styled.$2`",
      "\t$0",
      "`;"
    ]
  },
  "styledComponentFromExisting": {
    "prefix": "scc",
    "body": [
      "const $1 = styled($2)`",
      "\t$0",
      "`;"
    ]
  },
  "styledComponentThemeProp": {
    "prefix": "sctp",
    "body": [
      "\\${({ theme }) => theme.$1};"
    ]
  }
}
